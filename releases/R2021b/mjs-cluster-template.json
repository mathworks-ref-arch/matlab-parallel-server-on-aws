{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Mappings": {
    "RegionMap": {
      "us-east-1": {
        "AMI": "ami-076a7b441b564e01f"
      },
      "us-east-2": {
        "AMI": "ami-06384fa4091cbb27b"
      },
      "us-west-1": {
        "AMI": "ami-0bd46cd489c5d3409"
      },
      "us-west-2": {
        "AMI": "ami-0e4b4e1aec7fa1690"
      },
      "ca-central-1": {
        "AMI": "ami-0558b46bc6811b7bf"
      },
      "eu-central-1": {
        "AMI": "ami-030430bdcef52c9df"
      },
      "eu-west-1": {
        "AMI": "ami-07fda44ad34e1edc3"
      },
      "eu-west-2": {
        "AMI": "ami-06c3cb6743335c9a7"
      },
      "eu-west-3": {
        "AMI": "ami-0327679f90fc19aef"
      },
      "eu-north-1": {
        "AMI": "ami-07bb259d3611e6730"
      },
      "sa-east-1": {
        "AMI": "ami-0bd94935afc67b572"
      },
      "me-south-1": {
        "AMI": "ami-032e136385b3fb3a1"
      },
      "ap-east-1": {
        "AMI": "ami-0b34d814440f37e75"
      },
      "ap-south-1": {
        "AMI": "ami-03c9e8397f55d3bb5"
      },
      "ap-northeast-1": {
        "AMI": "ami-0cde953cb98fbdc6f"
      },
      "ap-northeast-2": {
        "AMI": "ami-000fcb01b1a731934"
      },
      "ap-southeast-1": {
        "AMI": "ami-020ad2e8a402d01d3"
      },
      "ap-southeast-2": {
        "AMI": "ami-0f5417432243b7d84"
      }
    }
  },
  "Resources": {
    "ClusterSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription": "Allow remote access for MATLAB and SSH, and internal traffic",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "27350",
            "ToPort": "27613",
            "CidrIp": {
              "Ref": "ClientIPAddress"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "ClientIPAddress"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "ClusterName"
            }
          }
        ]
      }
    },
    "ClusterSecurityGroupInternalTrafficRule": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "DependsOn": "ClusterSecurityGroup",
      "Properties": {
        "GroupId": {
          "Ref": "ClusterSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "1",
        "ToPort": "65535",
        "SourceSecurityGroupId": {
          "Ref": "ClusterSecurityGroup"
        }
      }
    },
    "HeadnodeInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "s3-access-policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:ListBucket"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::GetAtt": [
                              "S3Bucket",
                              "Arn"
                            ]
                          },
                          "/*"
                        ]
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "S3Bucket",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "cloudwatch-access-policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn:aws:logs",
                        {
                          "Ref": "AWS::Region"
                        },
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "log-group",
                        {
                          "Fn::Join": [
                            "-",
                            [
                              {
                                "Ref": "AWS::StackName"
                              },
                              {
                                "Fn::Select": [
                                  "2",
                                  {
                                    "Fn::Split": [
                                      "/",
                                      {
                                        "Ref": "AWS::StackId"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          ]
                        },
                        "*"
                      ]
                    ]
                  }
                },
                {
                  "Action": [
                    "cloudwatch:PutMetricData"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ]
            }
          },
          {
            "PolicyName": "ec2-access-policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "VisualEditor0",
                  "Effect": "Allow",
                  "Action": "ec2:DescribeInstances",
                  "Resource": "*"
                },
                {
                  "Sid": "VisualEditor1",
                  "Effect": "Allow",
                  "Action": "ec2:TerminateInstances",
                  "Resource": "*",
                  "Condition": {
                    "StringEquals": {
                      "aws:ResourceTag/aws:cloudformation:stack-id": {
                        "Ref": "AWS::StackId"
                      }
                    }
                  }
                }
              ]
            }
          },
          {
            "PolicyName": "cft-access-policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "VisualEditor0",
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:DescribeStackResources",
                    "cloudformation:DescribeStacks"
                  ],
                  "Resource": [
                    {
                      "Ref": "AWS::StackId"
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "HeadnodeInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "HeadnodeInstanceRole"
          }
        ]
      }
    },
    "WorkerInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "s3-access-policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:ListBucket"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::GetAtt": [
                              "S3Bucket",
                              "Arn"
                            ]
                          },
                          "/*"
                        ]
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "S3Bucket",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "cloudwatch-access-policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn:aws:logs",
                        {
                          "Ref": "AWS::Region"
                        },
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "log-group",
                        {
                          "Fn::Join": [
                            "-",
                            [
                              {
                                "Ref": "AWS::StackName"
                              },
                              {
                                "Fn::Select": [
                                  "2",
                                  {
                                    "Fn::Split": [
                                      "/",
                                      {
                                        "Ref": "AWS::StackId"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          ]
                        },
                        "*"
                      ]
                    ]
                  }
                },
                {
                  "Action": [
                    "cloudwatch:PutMetricData"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ]
            }
          }
        ]
      }
    },
    "WorkerInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "WorkerInstanceRole"
          }
        ]
      }
    },
    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {}
    },
    "Headnode": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "HeadnodeInstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "HeadnodeInstanceProfile"
        },
        "SecurityGroupIds": [
          {
            "Ref": "ClusterSecurityGroup"
          },
          {
            "Fn::If": [
              "AddSG",
              {
                "Ref": "AdditionalSecurityGroup"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ],
        "SubnetId": {
          "Fn::Select": [
            0,
            {
              "Ref": "Subnets"
            }
          ]
        },
        "KeyName": {
          "Ref": "SSHKeyName"
        },
        "ImageId": {
          "Fn::If": [
            "OverrideAmi",
            {
              "Ref": "InstanceAmiCustom"
            },
            {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "AMI"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "ClusterName"
                  },
                  "-Headnode"
                ]
              ]
            }
          },
          {
            "Key": "NodeType",
            "Value": "Headnode"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/usr/bin/env bash",
                "# Copyright 2011-2021 The MathWorks, Inc.",
                "export NODE_TYPE=HEADNODE",
                {
                  "Fn::Sub": "export JOB_MANAGER_NAME=\"${ClusterName}\""
                },
                {
                  "Fn::Sub": "export WORKERS_PER_NODE=\"${NumWorkersPerNode}\""
                },
                {
                  "Fn::Sub": "export PROFILE_NAME=\"${ClusterName}.settings\""
                },
                {
                  "Fn::Sub": "export S3_BUCKET=\"s3://${S3Bucket}\""
                },
                {
                  "Fn::Sub": "export LICENSE_MANAGER=\"${LicenseManager}\""
                },
                {
                  "Fn::Sub": "export ENABLE_CLOUDWATCH_LOGGING=\"${EnableCloudWatch}\""
                },
                {
                  "Fn::Join": [
                    "=",
                    [
                      "export LOG_GROUP_NAME",
                      {
                        "Fn::Join": [
                          "-",
                          [
                            {
                              "Ref": "AWS::StackName"
                            },
                            {
                              "Fn::Select": [
                                "2",
                                {
                                  "Fn::Split": [
                                    "/",
                                    {
                                      "Ref": "AWS::StackId"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        ]
                      }
                    ]
                  ]
                },
                {
                  "Fn::Sub": "export ENABLE_SCALE_IN_PROTECTION=\"${EnableScaleInProtection}\""
                },
                "\n",
                "/home/ubuntu/start.sh 2>&1 > /var/log/mathworks.log"
              ]
            ]
          }
        }
      }
    },
    "DatabaseVolume": {
      "Type": "AWS::EC2::Volume",
      "Condition": "CreateDBVolume",
      "Properties": {
        "Size": {
          "Ref": "DatabaseVolumeSize"
        },
        "AvailabilityZone": {
          "Fn::GetAtt": [
            "Headnode",
            "AvailabilityZone"
          ]
        }
      }
    },
    "DatabaseMountPoint": {
      "Type": "AWS::EC2::VolumeAttachment",
      "Condition": "CreateDBVolume",
      "Properties": {
        "InstanceId": {
          "Ref": "Headnode"
        },
        "VolumeId": {
          "Ref": "DatabaseVolume"
        },
        "Device": "/dev/sdh"
      }
    },
    "WorkerConfig": {
      "DependsOn": "Headnode",
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "SecurityGroups": [
          {
            "Ref": "ClusterSecurityGroup"
          },
          {
            "Fn::If": [
              "AddSG",
              {
                "Ref": "AdditionalSecurityGroup"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ],
        "ImageId": {
          "Fn::If": [
            "OverrideAmi",
            {
              "Ref": "InstanceAmiCustom"
            },
            {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "AMI"
              ]
            }
          ]
        },
        "InstanceType": {
          "Ref": "WorkerInstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "WorkerInstanceProfile"
        },
        "KeyName": {
          "Ref": "SSHKeyName"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/usr/bin/env bash",
                "# Copyright 2011-2021 The MathWorks, Inc.",
                "export NODE_TYPE=WORKER",
                {
                  "Fn::Sub": "export HEADNODE_NAME=\"${Headnode.PublicDnsName}\""
                },
                {
                  "Fn::Sub": "export HEADNODE_PRIVATE_IP=\"${Headnode.PrivateIp}\""
                },
                {
                  "Fn::Sub": "export PROFILE_NAME=\"${ClusterName}.settings\""
                },
                {
                  "Fn::Sub": "export JOB_MANAGER_NAME=\"${ClusterName}\""
                },
                {
                  "Fn::Sub": "export WORKERS_PER_NODE=\"${NumWorkersPerNode}\""
                },
                {
                  "Fn::Sub": "export HEADNODE_INSTANCE_ID=\"${Headnode}\""
                },
                {
                  "Fn::Sub": "export S3_BUCKET=\"s3://${S3Bucket}\""
                },
                {
                  "Fn::Sub": "export LICENSE_MANAGER=\"${LicenseManager}\""
                },
                {
                  "Fn::Sub": "export ENABLE_CLOUDWATCH_LOGGING=\"${EnableCloudWatch}\""
                },
                {
                  "Fn::Join": [
                    "=",
                    [
                      "export LOG_GROUP_NAME",
                      {
                        "Fn::Join": [
                          "-",
                          [
                            {
                              "Ref": "AWS::StackName"
                            },
                            {
                              "Fn::Select": [
                                "2",
                                {
                                  "Fn::Split": [
                                    "/",
                                    {
                                      "Ref": "AWS::StackId"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        ]
                      }
                    ]
                  ]
                },
                "\n",
                "/home/ubuntu/start.sh 2>&1 > /var/log/mathworks.log"
              ]
            ]
          }
        }
      }
    },
    "ClusterScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LaunchConfigurationName": {
          "Ref": "WorkerConfig"
        },
        "NewInstancesProtectedFromScaleIn": {
          "Ref": "EnableScaleInProtection"
        },
        "DesiredCapacity": {
          "Ref": "NumWorkerNodes"
        },
        "MinSize": "0",
        "MaxSize": {
          "Ref": "NumWorkerNodes"
        },
        "VPCZoneIdentifier": {
          "Ref": "Subnets"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "ClusterName"
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "NodeType",
            "Value": "WorkerNode",
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "S3DeleteBucketsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "lambda_basic_execution",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                }
              ]
            }
          },
          {
            "PolicyName": "s3-delete-bucket",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:DeleteBucket",
                    "s3:ListBucket"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "S3Bucket",
                      "Arn"
                    ]
                  }
                }
              ]
            }
          },
          {
            "PolicyName": "s3-delete-object",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:DeleteObject"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "/",
                      [
                        {
                          "Fn::GetAtt": [
                            "S3Bucket",
                            "Arn"
                          ]
                        },
                        "*"
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "EmptyBucketsLambda": {
      "DependsOn": "S3Bucket",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "/*",
                " * Copyright 2017-2019 The MathWorks, Inc.",
                " */",
                "",
                "'use strict';",
                "",
                "var AWS = require('aws-sdk');",
                "var s3 = new AWS.S3();",
                "",
                "exports.handler = (event, context) => {",
                "  console.log('Executing emptyBuckets lambda. Event: ' + JSON.stringify(event) + ', context: ' + JSON.stringify(context));",
                "  if (event.RequestType === 'Delete') {",
                "    var bucketName = event.ResourceProperties.BucketName;",
                "    s3.listObjectsV2({'Bucket': bucketName}, function(err, result) {",
                "      if (err) return sendResponse(event, context, 'FAILED', err);",
                "      if (result.Contents.length > 0) {",
                "        var objectList = result.Contents.map(c => ({'Key': c.Key}));",
                "        var obj = {",
                "          'Bucket': bucketName,",
                "          'Delete': {",
                "            'Objects': objectList",
                "          }",
                "        };",
                "        console.log(JSON.stringify(obj));",
                "        s3.deleteObjects(obj, function(e, data) {",
                "          if (e) return sendResponse(event, context, 'FAILED', e);",
                "          sendResponse(event, context, 'SUCCESS', {'Message': bucketName + ' emptied. ' + JSON.stringify(data)});",
                "        });",
                "      } else {",
                "          sendResponse(event, context, 'SUCCESS', {'Message': bucketName + ' already empty.'});",
                "      }",
                "    });",
                "  } else {",
                "    sendResponse(event, context, 'SUCCESS', {'Message': 'Lambda created and run successfully'});",
                "  }",
                "};",
                "",
                "// From AWS user guide at https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/walkthrough-custom-resources-lambda-lookup-amiids.html",
                "function sendResponse(event, context, responseStatus, responseData) {",
                "",
                "    var responseBody = JSON.stringify({",
                "        Status: responseStatus,",
                "        Reason: 'See the details in CloudWatch Log Stream: ' + context.logStreamName,",
                "        PhysicalResourceId: context.logStreamName,",
                "        StackId: event.StackId,",
                "        RequestId: event.RequestId,",
                "        LogicalResourceId: event.LogicalResourceId,",
                "        Data: responseData",
                "    });",
                "",
                "    console.log('RESPONSE BODY:\\n', responseBody);",
                "",
                "    var https = require('https');",
                "    var url = require('url');",
                "",
                "    var parsedUrl = url.parse(event.ResponseURL);",
                "    var options = {",
                "        hostname: parsedUrl.hostname,",
                "        port: 443,",
                "        path: parsedUrl.path,",
                "        method: 'PUT',",
                "        headers: {",
                "            'content-type': '',",
                "            'content-length': responseBody.length",
                "        }",
                "    };",
                "",
                "    console.log('SENDING RESPONSE...\\n');",
                "",
                "    var request = https.request(options, function(response) {",
                "        console.log('STATUS: ' + response.statusCode);",
                "        console.log('HEADERS: ' + JSON.stringify(response.headers));",
                "        // Tell AWS Lambda that the function execution is done",
                "        context.done();",
                "    });",
                "",
                "    request.on('error', function(error) {",
                "        console.log('sendResponse Error:' + error);",
                "        // Tell AWS Lambda that the function execution is done",
                "        context.done();",
                "    });",
                "",
                "    // write data to request body",
                "    request.write(responseBody);",
                "    request.end();",
                "}"
              ]
            ]
          }
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "S3DeleteBucketsRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x"
      },
      "Type": "AWS::Lambda::Function"
    },
    "EmptyBuckets": {
      "Type": "Custom::LambdaDependency",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "EmptyBucketsLambda",
            "Arn"
          ]
        },
        "BucketName": {
          "Ref": "S3Bucket"
        }
      }
    },
    "MJSLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Condition": "UseCloudwatchIamRole",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId"
                      }
                    ]
                  }
                ]
              }
            ]
          ]
        }
      }
    },
    "HeadNodeASGPolicy": {
      "DependsOn": [
        "ClusterScalingGroup",
        "HeadnodeInstanceRole"
      ],
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "asg-access-ploicy",
        "Roles": [
          {
            "Ref": "HeadnodeInstanceRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "VisualEditor0",
              "Effect": "Allow",
              "Action": [
                "autoscaling:SetInstanceProtection",
                "autoscaling:SetDesiredCapacity",
                "autoscaling:UpdateAutoScalingGroup"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:aws:autoscaling:${region}:${ID}:autoScalingGroup:*:autoScalingGroupName/${name}",
                  {
                    "region": {
                      "Ref": "AWS::Region"
                    },
                    "ID": {
                      "Ref": "AWS::AccountId"
                    },
                    "name": {
                      "Ref": "ClusterScalingGroup"
                    }
                  }
                ]
              }
            },
            {
              "Sid": "VisualEditor1",
              "Effect": "Allow",
              "Action": [
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:DescribeAutoScalingGroups"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    },
    "OnStackDeleteLambda": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [
        "HeadNodeASGPolicy",
        "StackDeleteLambdaRole"
      ],
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "# Copyright 2020-2021 The MathWorks, Inc.",
                "",
                "import boto3",
                "import cfnresponse",
                "",
                "def lambda_handler(event, context):",
                "    print(f\"Region = {event['ResourceProperties']['Region']}\")",
                "    print(f\"ASGName = {event['ResourceProperties']['ASGName']}\")",
                "    responseData = {}",
                "    if event['RequestType'] == 'Delete':",
                "        responseData['output'] = 'This was a delete event.'",
                "        asg_client = boto3.client('autoscaling', region_name=event['ResourceProperties']['Region'])",
                "        asg_response = asg_client.describe_auto_scaling_groups(AutoScalingGroupNames=[event['ResourceProperties']['ASGName']])",
                "        asgClient = boto3.client('autoscaling', region_name=event['ResourceProperties']['Region'])",
                "        for auto_scaling_group in asg_response['AutoScalingGroups']:",
                "            for instance in auto_scaling_group['Instances']:",
                "                asgClient.set_instance_protection(InstanceIds=[instance['InstanceId']], AutoScalingGroupName=event['ResourceProperties']['ASGName'], ProtectedFromScaleIn=False)",
                "                print(f'Unprotected : {instance[\"InstanceId\"]}')",
                "    else:",
                "        responseData['output'] = 'This was not a delete event.'",
                "    cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, \"CustomResourcePhysicalID\")"
              ]
            ]
          }
        },
        "Handler": "index.lambda_handler",
        "Runtime": "python3.8",
        "Timeout": "60",
        "Role": {
          "Fn::GetAtt": [
            "StackDeleteLambdaRole",
            "Arn"
          ]
        }
      }
    },
    "OnStackDelete": {
      "Type": "Custom::LambdaDependency",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "OnStackDeleteLambda",
            "Arn"
          ]
        },
        "ASGName": {
          "Ref": "ClusterScalingGroup"
        },
        "Region": {
          "Ref": "AWS::Region"
        }
      }
    },
    "StackDeleteLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ec2-access-policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "VisualEditor0",
                  "Effect": "Allow",
                  "Action": [
                    "autoscaling:SetInstanceProtection"
                  ],
                  "Resource": {
                    "Fn::Sub": [
                      "arn:aws:autoscaling:${region}:${ID}:autoScalingGroup:*:autoScalingGroupName/${name}",
                      {
                        "region": {
                          "Ref": "AWS::Region"
                        },
                        "ID": {
                          "Ref": "AWS::AccountId"
                        },
                        "name": {
                          "Ref": "ClusterScalingGroup"
                        }
                      }
                    ]
                  }
                },
                {
                  "Sid": "VisualEditor1",
                  "Effect": "Allow",
                  "Action": [
                    "autoscaling:DescribeAutoScalingGroups"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    }
  },
  "Parameters": {
    "VPC": {
      "Description": "ID of an existing VPC in which to deploy this stack",
      "Type": "AWS::EC2::VPC::Id",
      "ConstraintDescription": "Must be the ID of an existing VPC.",
      "AllowedPattern": ".+"
    },
    "Subnets": {
      "Description": "List of existing subnets IDs for the head node and workers",
      "Type": "List<AWS::EC2::Subnet::Id>",
      "ConstraintDescription": "Must be the ID of existing subnets within the chosen VPC.",
      "AllowedPattern": ".+"
    },
    "ClientIPAddress": {
      "Description": "The IP address range that will be allowed to connect to this cluster from outside of the VPC. This field should be formatted as <ip_address>/<mask>. E.g. 10.0.0.1/32. This is the public IP address which can be found by searching for 'what is my ip address' on the web. The mask determines the number of IP addresses to include. A mask of 32 is a single IP address. This calculator can be used to build a specific range: https://www.ipaddressguide.com/cidr. You may need to contact your IT administrator to determine which address is appropriate.",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "SSHKeyName": {
      "Description": "The name of an existing EC2 KeyPair to allow SSH access to all the instances. See https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html for details on creating these.",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "Must be the name of an existing EC2 KeyPair.",
      "AllowedPattern": ".+"
    },
    "ClusterName": {
      "Description": "A name to use for this cluster. This name will be shown in MATLAB as the cluster profile name.",
      "Type": "String",
      "AllowedPattern": "[A-Za-z][A-Za-z0-9 ]+",
      "ConstraintDescription": "Must only include alphanumeric characters and spaces and cannot start with a space or number."
    },
    "HeadnodeInstanceType": {
      "Description": "The AWS instance type to use for the head node, which will run the job manager. No workers will be started on this node, so this can be a smaller instance type than the worker nodes. See https://aws.amazon.com/ec2/instance-types for a list of instance types. Must be available in the Availability Zone of the first subnet in the configured list",
      "Default": "t3.medium",
      "Type": "String",
      "MinLength": 1,
      "ConstraintDescription": "The headnode instance type must be specified"
    },
    "InstanceAmiCustom": {
      "Default": "",
      "Description": "Custom Amazon Machine Image (AMI) in the target region",
      "Type": "String"
    },
    "DatabaseVolumeSize": {
      "Description": "The size in GB of the EBS volume to use for the database. All job and task information, including input and output data will be stored on this volume and should therefore have enough capacity to store the expected amount of data. If this parameter is set to 0 no volume will be created and the root volume of the instance will be used for the database.",
      "Type": "Number",
      "Default": "100",
      "MinValue": "0"
    },
    "WorkerInstanceType": {
      "Description": "The AWS instance type to use for the workers. See https://aws.amazon.com/ec2/instance-types for a list of instance types.",
      "Default": "c5.xlarge",
      "Type": "String",
      "MinLength": 1,
      "ConstraintDescription": "The worker instance type must be specified"
    },
    "NumWorkerNodes": {
      "Description": "The number of AWS instances to start for the workers to run on.",
      "Type": "Number",
      "Default": "2",
      "MinValue": "0"
    },
    "NumWorkersPerNode": {
      "Description": "The number of MATLAB workers to start on each instance. Specify 1 worker for every 2 vCPUs, because this results in 1 worker per physical core. For example an m4.16xlarge instance has 64 vCPUs, so can support 32 MATLAB workers. See https://aws.amazon.com/ec2/instance-types for details on vCPUs for each instance type.",
      "Type": "Number",
      "Default": "2",
      "MinValue": "0"
    },
    "LicenseManager": {
      "Description": "Optional License Manager for MATLAB string in the form <port>@<hostname>. If not specified, online licensing is used. If specified, the license manager must be accessible from the specified VPC and subnets. If the Network License Manager for MATLAB was deployed using the reference architecture, this can be achieved by specifying the security group of that deployment as the AdditionalSecurityGroup parameter.",
      "Type": "String",
      "Default": "",
      "AllowedPattern": "([0-9]+@[a-zA-Z0-9.\\-]+)?",
      "ConstraintDescription": "If specified, must be in the form <port>@<hostname>"
    },
    "EnableCloudWatch": {
      "Description": "Choose whether you want to use enable cloudwatch logging for the MATLAB Parallel Server instances",
      "Type": "String",
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Default": "No"
    },
    "AdditionalSecurityGroup": {
      "Description": "The ID of an additional (optional) Security Group for the instances to be placed in. Often the License Manager for MATLAB's Security Group.",
      "Type": "String",
      "Default": ""
    },
    "EnableScaleInProtection": {
      "Description": "By default, the instance scale-in protection is disabled. Choose either 'true' or 'false'. For more information about scale-in protection, see https://github.com/mathworks-ref-arch/matlab-parallel-server-on-aws#use-scale-in-protection",
      "Type": "String",
      "Default": false,
      "AllowedValues": [
        true,
        false
      ],
      "ConstraintDescription": "Must be either 'true' or 'false'"
    }
  },
  "Rules": {
    "SubnetsInVPC": {
      "Assertions": [
        {
          "Assert": {
            "Fn::EachMemberEquals": [
              {
                "Fn::ValueOfAll": [
                  "AWS::EC2::Subnet::Id",
                  "VpcId"
                ]
              },
              {
                "Ref": "VPC"
              }
            ]
          },
          "AssertDescription": "All subnets must exist in the VPC you have selected."
        }
      ]
    }
  },
  "Conditions": {
    "CreateDBVolume": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "DatabaseVolumeSize"
            },
            "0"
          ]
        }
      ]
    },
    "OverrideAmi": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "InstanceAmiCustom"
            },
            ""
          ]
        }
      ]
    },
    "AddSG": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "AdditionalSecurityGroup"
            },
            ""
          ]
        }
      ]
    },
    "UseCloudwatchIamRole": {
      "Fn::Equals": [
        "Yes",
        {
          "Ref": "EnableCloudWatch"
        }
      ]
    }
  },
  "Outputs": {
    "HeadnodeInstanceId": {
      "Description": "Instance ID of the headnode",
      "Value": {
        "Ref": "Headnode"
      }
    },
    "HeadnodePublicDNS": {
      "Description": "Public DNSName of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": [
          "Headnode",
          "PublicDnsName"
        ]
      }
    },
    "S3Bucket": {
      "Value": {
        "Ref": "S3Bucket"
      },
      "Description": "The name of the S3 bucket the profile has been saved to"
    },
    "ProfileName": {
      "Value": {
        "Fn::Join": [
          "",
          [
            {
              "Ref": "ClusterName"
            },
            ".settings"
          ]
        ]
      },
      "Description": "The name of the profile"
    },
    "BucketURL": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://s3.console.aws.amazon.com/s3/buckets/",
            {
              "Ref": "S3Bucket"
            },
            "/"
          ]
        ]
      },
      "Description": "The URL of the S3 bucket in the AWS console that contains the profile"
    },
    "CloudWatchLogs": {
      "Condition": "UseCloudwatchIamRole",
      "Description": "Cloudwatch log group containing log data for the MATLAB Parallel Server cluster",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://console.aws.amazon.com/cloudwatch/home?region=",
            {
              "Ref": "AWS::Region"
            },
            "#logsV2:log-groups/log-group/",
            {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  {
                    "Fn::Select": [
                      "2",
                      {
                        "Fn::Split": [
                          "/",
                          {
                            "Ref": "AWS::StackId"
                          }
                        ]
                      }
                    ]
                  }
                ]
              ]
            }
          ]
        ]
      }
    },
    "CloudWatchMetrics": {
      "Condition": "UseCloudwatchIamRole",
      "Description": "Cloudwatch metrics containing metric data for the MATLAB Parallel Server cluster",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://console.aws.amazon.com/cloudwatch/home?region=",
            {
              "Ref": "AWS::Region"
            },
            "#metricsV2:graph=~();namespace=~'",
            {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  {
                    "Fn::Select": [
                      "2",
                      {
                        "Fn::Split": [
                          "/",
                          {
                            "Ref": "AWS::StackId"
                          }
                        ]
                      }
                    ]
                  }
                ]
              ]
            }
          ]
        ]
      }
    },
    "ASGName": {
      "Value": {
        "Ref": "ClusterScalingGroup"
      },
      "Description": "Auto Scaling Group Name"
    }
  },
  "Metadata": {
    "StackType": "MJS",
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "MATLAB Job Scheduler Configuration"
          },
          "Parameters": [
            "ClusterName",
            "NumWorkerNodes",
            "NumWorkersPerNode"
          ]
        },
        {
          "Label": {
            "default": "Amazon EC2 Configuration"
          },
          "Parameters": [
            "HeadnodeInstanceType",
            "WorkerInstanceType",
            "DatabaseVolumeSize",
            "SSHKeyName"
          ]
        },
        {
          "Label": {
            "default": "Network Configuration"
          },
          "Parameters": [
            "VPC",
            "Subnets",
            "ClientIPAddress",
            "AdditionalSecurityGroup"
          ]
        },
        {
          "Label": {
            "default": "License Configuration"
          },
          "Parameters": [
            "LicenseManager"
          ]
        },
        {
          "Label": {
            "default": "Logging Configuration"
          },
          "Parameters": [
            "EnableCloudWatch"
          ]
        },
        {
          "Label": {
            "default": "Instance scale-in protection"
          },
          "Parameters": [
            "EnableScaleInProtection"
          ]
        }
      ],
      "ParameterLabels": {
        "ClusterName": {
          "default": "Cluster name"
        },
        "NumWorkerNodes": {
          "default": "Number of worker nodes"
        },
        "NumWorkersPerNode": {
          "default": "Number of workers to start on each node"
        },
        "DatabaseVolumeSize": {
          "default": "Size (GB) of the database EBS volume"
        },
        "HeadnodeInstanceType": {
          "default": "Instance type for the head node"
        },
        "WorkerInstanceType": {
          "default": "Instance type for the worker nodes"
        },
        "SSHKeyName": {
          "default": "Name of SSH key"
        },
        "ClientIPAddress": {
          "default": "CIDR IP address range of client"
        },
        "VPC": {
          "default": "VPC to deploy this stack to"
        },
        "Subnets": {
          "default": "Subnets for the head node and worker nodes"
        },
        "LicenseManager": {
          "default": "License Manager for MATLAB connection string"
        },
        "AdditionalSecurityGroup": {
          "default": "Additional security group to place instances in"
        },
        "EnableCloudWatch": {
          "default": "Configure cloudwatch logging for the MATLAB Parallel Server instances"
        },
        "EnableScaleInProtection": {
          "default": "Enable instance scale-in protection"
        }
      }
    }
  }
}